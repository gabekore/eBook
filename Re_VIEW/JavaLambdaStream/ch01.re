= ラムダ式、はじめの一歩
== まずは書いてみよう！
理屈とかゴチャゴチャ言わず、まずは書いてみんかい！

//listnum[list-01-01][初めてのラムダ式][Java]{
public class LambdaSample1 {
    public static void main(String[] args) {
        // Runnableは引数も戻り値も無い関数を型（インタフェース）にしたもの
        // {}; は省略可能
        Runnable rn = () -> { System.out.println(""ランナブルだよぉ〜ん""); };
        rn.run();
    }
}
//}


//cmd[処理結果]{
ランナブルだよぉ〜ん
//}


== ラムダ式とは？
ラムダ式は関数型プログラミングをJavaに取り入れ・・・・とか、@<br>{}
並列処理がどーのこーの、遅延評価がどーのこーの・・・とか、@<br>{}
ウンタラカンタラ・・・とか、、、、


みたいな難しいことはよく分かりません。

筆者的にはこういう風に理解しています。

//quote{
@<strong>{『関数（って言うか一連の処理）を変数に入れられるようになった』}

@<strong>{『ラムダ式って、気楽に作れる関数じゃん！』}
//}


これぐらいの理解で充分、と（個人的には）思っています。


== 無名クラスとの比較
ラムダ式関連の書籍を読むと、無名クラスとの比較が多いです。

がっ！！

その比較に意味があるとは（個人的には）思えませんし無名クラスを全く知らなくてもラムダ式は充分使えるため、本書では無名クラスについては言及しません。

興味の有る方は個人的にお調べください。


== ラムダ式のメリットは？
@<b>{わしゃ知らん！}

それを考え実現するのはあなたの腕の見せ所！


== はやくも演習！？
//note{
なんでもいいので@<kw>{Runnableインタフェース}を使ったプログラムを書いてみよう！！！
//}

 * 引数も戻り値も使えないことに注意
 * ラムダ式の中で処理が完結することに注意
 * ラムダ式を引数や戻り値として使ってみよう


=={mondai-ch01-01} Runnableになんとかして引数を渡す方法
=== 問題
//note{
@<list>{ch01|list-01-01}だと、@<kw>{"ランナブルだよぉ〜ん"}固定だとラムダ式を使い回せないじゃん！@<br>{}
画面に表示する文字列の部分をなんとかして入れ替えたい！！

どうすれば良いのでしょうか？

もしくは、そんな方法は無いのでしょうか？
//}

=== 解答
参照：@<hd>{chA|ans-ch01-01}
